// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250807200745_AddTicket")]
    partial class AddTicket
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Bets.Bet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Odds")
                        .HasColumnType("numeric")
                        .HasColumnName("odds");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("race_id");

                    b.Property<string>("Runners")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("runners");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_bets");

                    b.HasIndex("RaceId")
                        .HasDatabaseName("ix_bets_race_id");

                    b.ToTable("bets", "public");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Races.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<string>("Probabilities")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("probabilities");

                    b.Property<string>("Result")
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_races");

                    b.ToTable("races", "public");
                });

            modelBuilder.Entity("Domain.Ticket.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Payin")
                        .HasColumnType("numeric")
                        .HasColumnName("payin");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalOdds")
                        .HasColumnType("numeric")
                        .HasColumnName("total_odds");

                    b.Property<decimal>("WinAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("win_amount");

                    b.HasKey("Id")
                        .HasName("pk_tickets");

                    b.ToTable("tickets", "public");
                });

            modelBuilder.Entity("Domain.Ticket.TicketBet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BetId")
                        .HasColumnType("uuid")
                        .HasColumnName("bet_id");

                    b.Property<decimal>("Odds")
                        .HasColumnType("numeric")
                        .HasColumnName("odds");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticket_id");

                    b.HasKey("Id")
                        .HasName("pk_ticket_bets");

                    b.HasIndex("BetId")
                        .HasDatabaseName("ix_ticket_bets_bet_id");

                    b.HasIndex("TicketId")
                        .HasDatabaseName("ix_ticket_bets_ticket_id");

                    b.ToTable("ticket_bets", "public");
                });

            modelBuilder.Entity("Domain.Bets.WinnerBet", b =>
                {
                    b.HasBaseType("Domain.Bets.Bet");

                    b.ToTable("bets", "public");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Domain.Bets.WithinFirstThreeBet", b =>
                {
                    b.HasBaseType("Domain.Bets.Bet");

                    b.ToTable("bets", "public");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Domain.Bets.Bet", b =>
                {
                    b.HasOne("Domain.Races.Race", "Race")
                        .WithMany("Bets")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bets_races_race_id");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Domain.Ticket.TicketBet", b =>
                {
                    b.HasOne("Domain.Bets.Bet", "Bet")
                        .WithMany("TicketBets")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_bets_bets_bet_id");

                    b.HasOne("Domain.Ticket.Ticket", "Ticket")
                        .WithMany("Bets")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_bets_tickets_ticket_id");

                    b.Navigation("Bet");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Domain.Bets.Bet", b =>
                {
                    b.Navigation("TicketBets");
                });

            modelBuilder.Entity("Domain.Races.Race", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("Domain.Ticket.Ticket", b =>
                {
                    b.Navigation("Bets");
                });
#pragma warning restore 612, 618
        }
    }
}
